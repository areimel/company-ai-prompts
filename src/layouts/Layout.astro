---
import { SEO } from "astro-seo";
import Footer from "@components/footer.astro";
import Navbar from "@components/navbar/navbar.astro";
import AnnouncementBanner from "@components/AnnouncementBanner.astro";
import "@fontsource-variable/inter/index.css";
import '@fontsource-variable/bricolage-grotesque';
import branding from "@data/branding.json";

export interface Props {
  title: string;
}

const canonicalURL = new URL(Astro.url.pathname, Astro.site).toString();

const resolvedImageWithDomain = new URL(
  "/opengraph.jpg",
  Astro.site
).toString();

const { title } = Astro.props;

const makeTitle = title
  ? title + " | " + branding.company.name
  : branding.seo.title;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />

    <!-- <link rel="preload" as="image" href={src} alt="Hero" /> -->
    <SEO
      title={makeTitle}
      description={branding.seo.description}
      canonical={canonicalURL}
      twitter={{
        creator: branding.social.twitter.handle,
        site: branding.social.twitter.handle,
        card: "summary_large_image",
      }}
      openGraph={{
        basic: {
          url: canonicalURL,
          type: "website",
          title: branding.seo.openGraph.title,
          image: resolvedImageWithDomain,
        },
        image: {
          alt: branding.seo.openGraph.image.alt,
        },
      }}
    />
  </head>
  <body class="bg-gray-50 dark:bg-gray-900 transition-colors duration-300">
    <!-- Loading overlay -->
    <div id="loading-overlay" class="fixed inset-0 bg-gray-50 dark:bg-gray-900 z-50 flex items-center justify-center">
      <div class="loading-spinner"></div>
    </div>
    
    <!-- Main content -->
    <div id="main-content" class="opacity-0 transition-opacity duration-500">
      <AnnouncementBanner />
      <Navbar />
      <slot />
      <Footer />
    </div>

    <style is:global>
      /* Improve Page speed */
      /* https://css-tricks.com/almanac/properties/c/content-visibility/ */
      img {
        content-visibility: auto;
      }

      /* Smooth transition for dark mode */
      html {
        transition: background-color 0.3s ease;
      }

      html.dark {
        background-color: rgb(17 24 39); /* matches dark:bg-gray-900 */
      }

      /* Balanced text - multiple versions because I forget */
      .text-balanced,
      .text-balance,
      .text-wrap-balanced,
      .text-wrap-balance {
        text-wrap: balance;
      }

      /* Loading spinner animation */
      .loading-spinner {
        width: 40px;
        height: 40px;
        border: 4px solid rgb(209 213 219); /* gray-300 */
        border-top: 4px solid rgb(59 130 246); /* blue-500 */
        border-radius: 50%;
        animation: spin 1s linear infinite;
      }

      .dark .loading-spinner {
        border: 4px solid rgb(75 85 99); /* gray-600 */
        border-top: 4px solid rgb(96 165 250); /* blue-400 */
      }

      @keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
      }

      /* Ensure transitions are disabled for users who prefer reduced motion */
      @media (prefers-reduced-motion: reduce) {
        html, body, #main-content {
          transition: none !important;
        }
        .loading-spinner {
          animation: none !important;
        }
      }

      /* Font loading optimization */
      body {
        font-display: swap;
      }
    </style>

    <script>
      // Hide loading overlay and show content once fonts and DOM are ready
      function initPageLoad() {
        const loadingOverlay = document.getElementById('loading-overlay');
        const mainContent = document.getElementById('main-content');
        
        function showContent() {
          if (loadingOverlay && mainContent) {
            // Hide loading overlay
            loadingOverlay.style.opacity = '0';
            loadingOverlay.style.transition = 'opacity 300ms ease';
            
            // Show main content
            mainContent.style.opacity = '1';
            
            // Remove loading overlay after transition
            setTimeout(() => {
              loadingOverlay.style.display = 'none';
            }, 300);
          }
        }

        // Wait for fonts to load before showing content
        if (document.fonts && document.fonts.ready) {
          document.fonts.ready.then(showContent);
        } else {
          // Fallback for browsers without Font Loading API
          setTimeout(showContent, 100);
        }
      }

      // Initialize when DOM is ready
      if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', initPageLoad);
      } else {
        initPageLoad();
      }
    </script>
  </body>
</html>
